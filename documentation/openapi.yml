openapi: 3.0.3
info:
  description: This is the specification for the Stadtgemüse Service.
  version: 0.0.1-SNAPSHOT
  title: Stadtgemüse Service
  contact: { }
servers:
  -   url: 'https://veg-service.herokuapp.com/v1/'
      description: Production v1
tags:
  -   name: Balance
      description: Handles balance requests
  -   name: Stock
      description: All functionality related to the stock
  -   name: Purchase
      description: Functionality related to purchasing items
paths:
  '/balance/{name}':
    get:
      tags:
        - Balance
      summary: Gets the current balance of the user
      description: 'Gets the current balance of the user, or 0 if the user is currently not known'
      operationId: balanceGet
      parameters:
        -   $ref: '#/components/parameters/username'
      responses:
        '200':
          description: The current value of the balance for the specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/balance-response'
        default:
          description: Details about the error that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
    patch:
      tags:
        - Balance
      summary: Changes the balance for the specified user
      operationId: balancePatch
      parameters:
        -   $ref: '#/components/parameters/username'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/balance-patch-request'
      responses:
        '200':
          description: The current value of the balance for the specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/balance-response'
        default:
          description: Details about the error that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
  '/balance/{name}/topup':
    post:
      tags:
        - Balance
      summary: Topup the balance for the specified user
      operationId: balanceTopup
      parameters:
        -   $ref: '#/components/parameters/username'
      requestBody:
        description: 'Top up the balance with the amount, containing a positive value'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/balance-amount-request'
      responses:
        '200':
          description: The current value of the balance for the specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/balance-response'
        default:
          description: Details about the error that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
  '/balance/{name}/withdraw':
    post:
      tags:
        - Balance
      summary: Withdraw the balance for the specified user
      operationId: balanceWithdraw
      parameters:
        -   $ref: '#/components/parameters/username'
      requestBody:
        description: 'Withdraw the amount from the balance, containing a positive value'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/balance-amount-request'
      responses:
        '200':
          description: The current value of the balance for the specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/balance-response'
        default:
          description: Details about the error that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'

  '/stock':
    get:
      tags:
        - Stock
      summary: Retrieves all items currently in stock
      operationId: stockGet
      responses:
        '200':
          description: Successful call, returns the current stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/all-stock-response'
        default:
          description: Details about the error that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
    post:
      tags:
        - Stock
      summary: Adds a new Item to the current stock
      operationId: stockPost
      requestBody:
        description: All data neccesary to create a new stock item
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stock-post-request'
      responses:
        '201':
          description: Successful call, returns the created stock item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-response'
        default:
          description: Details about the error that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
  '/stock/{item-id}':
    get:
      tags:
        - Stock
      summary: Retrieves information about a specific item in the stock
      operationId: stockItemGet
      parameters:
        -   $ref: '#/components/parameters/item-id'
      responses:
        '200':
          description: Successful call, returns the requested stock item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-response-by-id'
        default:
          description: Details about the error that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
    patch:
      tags:
        - Stock
      summary: Updates data of an item
      operationId: stockPatch
      parameters:
        -   $ref: '#/components/parameters/item-id'
      requestBody:
        description: All data of an item that can be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stock-patch-request'
      responses:
        '200':
          description: Successful call, returns the updated stock item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-response'
        default:
          description: Details about the error that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
    delete:
      tags:
        - Stock
      summary: Soft deletes an item from the stock. It will no longer show up in the stock list, but information can still be retrieved
      operationId: stockDelete
      parameters:
        -   $ref: '#/components/parameters/item-id'
      responses:
        '204':
          description: The stock item was successfully soft-deleted
        default:
          description: Details about the error that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'

  '/purchase/{name}':
    post:
      tags:
        - Purchase
      summary: Purchases items for a user. Reduces the amount of these items in stock and the users balance
      parameters:
        -   $ref: '#/components/parameters/username'
      operationId: purchaseFromStock
      requestBody:
        description: All items that the user wants to purchase
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/purchase-request'
      responses:
        '200':
          description: Successful call, returns the price of what was purchase and the new balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/purchase-response'
        default:
          description: Details about the error that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'

components:
  schemas:

    #
    # Error Schemas
    #

    error-response:
      description: "Contains details about the occurred error"
      type: object
      required:
        - errorCode
        - status
        - errorMessage
      properties:
        errorCode:
          description: "Number, that can be referenced to a specific error"
          example: 400001
          type: integer
        status:
          description: "HTTP Status Code returned"
          example: 400
          type: integer
        message:
          description: "A detailed error message"
          example: "Validation failed"
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/error-detail'
    error-detail:
      description: A more precise explaination of an error
      type: object
      properties:
        message:
          description: A message relating to the error detail
          type: string
          example: "Invalid request parameter: balance"
        detail:
          description: A detailed message of the error
          type: string
          example: "The value null does not match the Specification"

    #
    # Request Schemas
    #

    balance-patch-request:
      type: object
      description: Contains data about how to change the balance
      required:
        - balance
      properties:
        balance:
          description: Absolute balance to be applied instead of the current balance
          example: 60
          type: number
          format: float

    balance-amount-request:
      description: Contains data about the amount you want to change the balance
      type: object
      required:
        - amount
      properties:
        amount:
          description: Realative amount to be applied to the balance
          example: 60
          minimum: 0
          type: number
          format: float

    purchase-request:
      description: All items that the user wants to purchase
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/cart-item'

    stock-post-request:
      description: All possible fields to set when creating a new item in stock
      type: object
      required:
        - name
        - unitType
        - quantity
        - pricePerUnit
      properties:
        name:
          $ref: '#/components/schemas/item-name'
        unitType:
          $ref: '#/components/schemas/unitType'
        quantity:
          $ref: '#/components/schemas/quantity'
        pricePerUnit:
          $ref: '#/components/schemas/pricePerUnit'
        description:
          $ref: '#/components/schemas/item-description'

    stock-patch-request:
      description: All data of an item that can be updated
      type: object
      properties:
        name:
          $ref: '#/components/schemas/item-name'
        unitType:
          $ref: '#/components/schemas/unitType'
        quantity:
          $ref: '#/components/schemas/quantity'
        pricePerUnit:
          $ref: '#/components/schemas/pricePerUnit'
        description:
          $ref: '#/components/schemas/item-description'


    #
    # Response Schemas
    #

    balance-response:
      description: Contains data about the current balance
      type: object
      required:
        - id
        - name
        - unitType
        - quantity
        - pricePerUnit
      properties:
        balance:
          description: The current balance
          example: 10
          type: number
          format: float

    all-stock-response:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/stock-response'

    stock-response:
      description: All stored data of one item in the stock
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          $ref: '#/components/schemas/item-name'
        unitType:
          $ref: '#/components/schemas/unitType'
        quantity:
          $ref: '#/components/schemas/quantity'
        pricePerUnit:
          $ref: '#/components/schemas/pricePerUnit'
        description:
          $ref: '#/components/schemas/item-description'

    stock-response-by-id:
      description: All stored data of one item in the stock
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          $ref: '#/components/schemas/item-name'
        unitType:
          $ref: '#/components/schemas/unitType'
        quantity:
          $ref: '#/components/schemas/quantity'
        pricePerUnit:
          $ref: '#/components/schemas/pricePerUnit'
        description:
          $ref: '#/components/schemas/item-description'
        isDeleted:
          type: boolean
          description: Wether this item is deleted
          example: false

    purchase-response:
      description: Information about the users balance and the purchased cart
      type: object
      properties:
        name:
          $ref: '#/components/schemas/username'
        balance:
          description: The balance of the user after the purchase
          type: number
          format: float
          example: 140.8
        price:
          description: How much the cart cost
          type: number
          format: float
          example: 17.43


    #
    # Reusable Items
    #

    uuid:
      description: Unique identifier
      example: "0794e2e2-f5b2-42fb-a2b3-e12c75897f85"
      type: string

    item-name:
      description: Name of the stock item
      example: Kartoffeln
      type: string
      minLength: 1

    unitType:
      description: |-
        By which measurement the item is sold
          * WEIGHT: Kilogram, or fractions of a kilogram
          * PIECE: Positive amount of whole pieces
      example: PIECE
      type: string
      enum:
        - PIECE
        - WEIGHT

    quantity:
      description: |-
        How many items are left in stock.
        This value can be negative, to allow for inconsistencies between this service and the real world
      example: 42.0
      type: number
      format: float

    pricePerUnit:
      description: |-
        How much money in Euro one unit of this item costs.
        A unit is defined based on the unitType
          * WEIGHT: A unit is 1.0 Kg
          * PIECE: A unit is 1.0 pieces
      type: number
      format: float
      minimum: 0
      example: 7

    cart-item:
      description: An specific item including its quantity the user wants to purchase
      type: object
      required:
        - id
        - amount
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        amount:
          type: number
          description: |-
            How many actual items the user wants to buy.
            Must be an integer if the unitType of the referenced item is PIECE
          format: float
          example: 7

    username:
      description: The unique name of the user
      type: string
      example: Robby

    item-description:
      description: |-
        An optional description of an item.
        To delete the description, set it to an empty string.
      type: string
      example: "Potatoes from our friendly farmer Joe"
      minLength: 0
      maxLength: 10000
      default: ""

  parameters:
    username:
      in: path
      name: name
      schema:
        type: string
      required: true
      description: The unique name of the user

    item-id:
      in: path
      name: item-id
      schema:
        type: string
        maxLength: 36
      required: true
      description: The unique id of an item
